using Microsoft.EntityFrameworkCore;
using SoftwareProject.Client.Data;
using SoftwareProject.Client.Interfaces;
using SoftwareProject.Data;

namespace SoftwareProject.Client.Services;

/// <summary>
/// Message service used on the backend.
/// </summary>
public class MessageService : IMessageService
{
    // CLASS VARIABLES
    // Assign DbContext
    private IDbContextFactory<ChatbotDbContext> dbContextFactory;
    
    /// <summary>
    /// CONSTRUCTOR
    /// Assigns the Chatbot DbContext so that the database can be accessed.
    /// </summary>
    /// <param name="pDbContextFactory">Stores the DbContext class</param>
    public MessageService(IDbContextFactory<ChatbotDbContext> pDbContextFactory)
    {
        dbContextFactory = pDbContextFactory;
    }
    
    /// <summary>
    /// Adds a message to the database.
    /// </summary>
    /// <param name="topic">Stores the message table</param>
    public async Task<MessageSendStatus> CreateMessage(MessageDto messageDto)
    {
        await using var context = await dbContextFactory.CreateDbContextAsync();
        var message = new Message
        {
            airesponse = messageDto.AiResponse,
            messagetext = messageDto.MessageText,
            timesent = DateTime.Now,
            topic_id = messageDto.TopicId,
            // message_id is auto-generated by the database
        };
        await context.Message.AddAsync(message);
        await context.SaveChangesAsync();
        return MessageSendStatus.Success;
    }

    public async Task<List<MessageDto>> GetMessages(int topicId)
    {
        await using var context = await dbContextFactory.CreateDbContextAsync();
        return await context.Message
            .Where(m => m.topic_id == topicId)
            .Select(m => new MessageDto
            {
                MessageId = m.message_id,
                AiResponse = m.airesponse,
                MessageText = m.messagetext,
                TimeSent = m.timesent,
                TopicId = m.topic_id
            })
            .ToListAsync();
    }
}